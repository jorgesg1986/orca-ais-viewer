orca-ais-viewer {
    aisstream {
        websocket-uri = "wss://stream.aisstream.io/v0/stream"
    }
    postgis = {
        connectionPool = "HikariCP" //use HikariCP for our connection pool
        dataSourceClass = "org.postgresql.ds.PGSimpleDataSource" //Simple datasource with no connection pooling. The connection pool has already been specified with HikariCP.
        properties = {
            serverName = "localhost"
            portNumber = "5432"
            databaseName = "ais"
            user = "postgres"
            password = "postgres"
        }
        numThreads = 10
    }
    ais-retriever-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"

        thread-pool-executor {
            # The core number of threads to keep in the pool
            core-pool-size-min = 10
            core-pool-size-factor = 2.0
            core-pool-size-max = 20

            # The maximum number of threads to allow in the pool
            max-pool-size-min = 20
            max-pool-size-factor = 3.0
            max-pool-size-max = 50
        }
        throughput = 1
    }
    client-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"

        thread-pool-executor {
            # The core number of threads to keep in the pool
            core-pool-size-min = 10
            core-pool-size-factor = 2.0
            core-pool-size-max = 20

            # The maximum number of threads to allow in the pool
            max-pool-size-min = 20
            max-pool-size-factor = 3.0
            max-pool-size-max = 50
        }
        throughput = 1
        }
}
pekko {
  loglevel = "DEBUG" // or "INFO"
  actor {
    loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
    logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"
  }
  stream {
    materializer {
      debug-logging = on // Enables stream specific debug logging if available
    }
  }
  http {
    server {
      idle-timeout = 600s // Adjust the idle timeout for HTTP connections
    }
    client {
      idle-timeout = 600s // Adjust the idle timeout for HTTP connections
    }
  }
}
